StringTokenizer class in Java is used to break a string into tokens. 
A StringTokenizer object internally maintains a current position within the string to be tokenized. 
Some operations advance this current position past the characters processed. A token is returned by taking a substring of the string that was used to create the StringTokenizer object. It provides the first step in the parsing process often called lexer or scanner. The String Tokenizer class allows an application to break strings into tokens. It implements the Enumeration interface. This class is used for parsing data. To use String Tokenizer class we have to specify an input string and a string that contains delimiters. Delimiters are the characters that separate tokens. Each character in the delimiter string is considered a valid delimiter. Default delimiters are whitespaces, new line, space, and tab. 

stringtokenizer 
Constructors of StringToken: Let us consider ‘str’ as the string to be tokenized:
StringTokenizer(String str): default delimiters like newline, space, tab, carriage return, and form feed.
StringTokenizer(String str, String delim):  delim is a set of delimiters that are used to tokenize the given string.
StringTokenizer(String str, String delim, boolean flag): The first two parameters have the same meaning wherein The flag serves the following purpose.
he java.util.StringTokenizer class allows you to break a String into tokens. It is simple way to break a String. It is a legacy class of Java.

It doesn't provide the facility to differentiate numbers, quoted strings, identifiers etc. 
like StreamTokenizer class. We will discuss about the StreamTokenizer class in I/O chapter.

In the StringTokenizer class, the delimiters can be provided at the time of creation or one by one to the tokens.
